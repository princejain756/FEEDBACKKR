{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nconst STORAGE_KEY = 'kriedko_feedback_data';\nconst VERSION_KEY = 'kriedko_feedback_version';\nexport const useLocalStorage = () => {\n  _s();\n  const [feedbacks, setFeedbacks] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Generate unique ID\n  const generateId = useCallback(() => {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }, []);\n\n  // Load feedbacks from localStorage\n  const loadFeedbacks = useCallback(() => {\n    try {\n      const data = localStorage.getItem(STORAGE_KEY);\n      const parsedData = data ? JSON.parse(data) : [];\n      setFeedbacks(parsedData);\n      setIsLoading(false);\n      return parsedData;\n    } catch (error) {\n      console.error('Error reading from localStorage:', error);\n      setFeedbacks([]);\n      setIsLoading(false);\n      return [];\n    }\n  }, []);\n\n  // Save feedbacks to localStorage\n  const saveFeedbacks = useCallback(newFeedbacks => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newFeedbacks));\n      localStorage.setItem(VERSION_KEY, Date.now().toString());\n      setFeedbacks(newFeedbacks);\n      return true;\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n      return false;\n    }\n  }, []);\n\n  // Add new feedback\n  const addFeedback = useCallback(feedbackData => {\n    const newFeedback = {\n      id: generateId(),\n      createdAt: new Date().toISOString(),\n      ...feedbackData\n    };\n\n    // Get current feedbacks from localStorage to ensure we have the latest data\n    const currentFeedbacks = loadFeedbacks();\n    const updatedFeedbacks = [newFeedback, ...currentFeedbacks];\n    saveFeedbacks(updatedFeedbacks);\n    return newFeedback;\n  }, [generateId, saveFeedbacks, loadFeedbacks]);\n\n  // Update feedback\n  const updateFeedback = useCallback((id, updatedData) => {\n    const currentFeedbacks = loadFeedbacks();\n    const updatedFeedbacks = currentFeedbacks.map(feedback => feedback.id === id ? {\n      ...feedback,\n      ...updatedData\n    } : feedback);\n    saveFeedbacks(updatedFeedbacks);\n    return updatedFeedbacks.find(feedback => feedback.id === id);\n  }, [saveFeedbacks, loadFeedbacks]);\n\n  // Delete feedback\n  const deleteFeedback = useCallback(id => {\n    const currentFeedbacks = loadFeedbacks();\n    const updatedFeedbacks = currentFeedbacks.filter(feedback => feedback.id !== id);\n    saveFeedbacks(updatedFeedbacks);\n    return true;\n  }, [saveFeedbacks, loadFeedbacks]);\n\n  // Clear all feedbacks\n  const clearAllFeedbacks = useCallback(() => {\n    localStorage.removeItem(STORAGE_KEY);\n    localStorage.removeItem(VERSION_KEY);\n    setFeedbacks([]);\n  }, []);\n\n  // Search feedbacks\n  const searchFeedbacks = useCallback((query, sentiment = null) => {\n    const searchTerm = query.toLowerCase();\n    const currentFeedbacks = loadFeedbacks();\n    return currentFeedbacks.filter(feedback => {\n      var _feedback$sentiment;\n      const textMatch = !query || feedback.favouriteItem && feedback.favouriteItem.toLowerCase().includes(searchTerm) || feedback.improvements && feedback.improvements.toLowerCase().includes(searchTerm) || feedback.mealPreference && feedback.mealPreference.toLowerCase().includes(searchTerm);\n      const sentimentMatch = !sentiment || ((_feedback$sentiment = feedback.sentiment) === null || _feedback$sentiment === void 0 ? void 0 : _feedback$sentiment.label) === sentiment;\n      return textMatch && sentimentMatch;\n    });\n  }, [loadFeedbacks]);\n\n  // Calculate analytics\n  const calculateAnalytics = useCallback(() => {\n    if (feedbacks.length === 0) {\n      return {\n        count: 0,\n        averages: {},\n        sentiment: {\n          positive: 0,\n          neutral: 0,\n          negative: 0,\n          averageScore: 0\n        }\n      };\n    }\n    const numericFields = ['taste', 'service', 'wait', 'overall', 'experienceIndex'];\n    const averages = {};\n    numericFields.forEach(field => {\n      const values = feedbacks.map(f => f[field]).filter(v => v !== null && v !== undefined && !isNaN(v));\n      if (values.length > 0) {\n        averages[field] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      }\n    });\n    const sentimentCounts = {\n      positive: 0,\n      neutral: 0,\n      negative: 0\n    };\n    let sentimentSum = 0;\n    let sentimentCount = 0;\n    feedbacks.forEach(feedback => {\n      var _feedback$sentiment2;\n      if ((_feedback$sentiment2 = feedback.sentiment) !== null && _feedback$sentiment2 !== void 0 && _feedback$sentiment2.label) {\n        sentimentCounts[feedback.sentiment.label]++;\n        if (feedback.sentiment.score !== undefined) {\n          sentimentSum += feedback.sentiment.score;\n          sentimentCount++;\n        }\n      }\n    });\n    return {\n      count: feedbacks.length,\n      averages,\n      sentiment: {\n        ...sentimentCounts,\n        averageScore: sentimentCount > 0 ? sentimentSum / sentimentCount : 0\n      }\n    };\n  }, [feedbacks]);\n\n  // Export data\n  const exportData = useCallback(() => {\n    const exportData = {\n      version: '1.0',\n      exportedAt: new Date().toISOString(),\n      feedbacks: feedbacks\n    };\n    return JSON.stringify(exportData, null, 2);\n  }, [feedbacks]);\n\n  // Import data\n  const importData = useCallback(jsonData => {\n    try {\n      const data = JSON.parse(jsonData);\n      if (data.feedbacks && Array.isArray(data.feedbacks)) {\n        saveFeedbacks(data.feedbacks);\n        return {\n          success: true,\n          count: data.feedbacks.length\n        };\n      }\n      return {\n        success: false,\n        error: 'Invalid data format'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Invalid JSON format'\n      };\n    }\n  }, [saveFeedbacks]);\n\n  // Load feedbacks on mount\n  useEffect(() => {\n    loadFeedbacks();\n  }, [loadFeedbacks]);\n  return {\n    feedbacks,\n    isLoading,\n    addFeedback,\n    updateFeedback,\n    deleteFeedback,\n    clearAllFeedbacks,\n    searchFeedbacks,\n    calculateAnalytics,\n    exportData,\n    importData,\n    loadFeedbacks\n  };\n};\n_s(useLocalStorage, \"BRtFFChWZBYrFf+M9MaXLGqndaA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","STORAGE_KEY","VERSION_KEY","useLocalStorage","_s","feedbacks","setFeedbacks","isLoading","setIsLoading","generateId","Date","now","toString","Math","random","substr","loadFeedbacks","data","localStorage","getItem","parsedData","JSON","parse","error","console","saveFeedbacks","newFeedbacks","setItem","stringify","addFeedback","feedbackData","newFeedback","id","createdAt","toISOString","currentFeedbacks","updatedFeedbacks","updateFeedback","updatedData","map","feedback","find","deleteFeedback","filter","clearAllFeedbacks","removeItem","searchFeedbacks","query","sentiment","searchTerm","toLowerCase","_feedback$sentiment","textMatch","favouriteItem","includes","improvements","mealPreference","sentimentMatch","label","calculateAnalytics","length","count","averages","positive","neutral","negative","averageScore","numericFields","forEach","field","values","f","v","undefined","isNaN","reduce","sum","val","sentimentCounts","sentimentSum","sentimentCount","_feedback$sentiment2","score","exportData","version","exportedAt","importData","jsonData","Array","isArray","success"],"sources":["/Users/princejain756/feedback form/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst STORAGE_KEY = 'kriedko_feedback_data';\nconst VERSION_KEY = 'kriedko_feedback_version';\n\nexport const useLocalStorage = () => {\n  const [feedbacks, setFeedbacks] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Generate unique ID\n  const generateId = useCallback(() => {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }, []);\n\n  // Load feedbacks from localStorage\n  const loadFeedbacks = useCallback(() => {\n    try {\n      const data = localStorage.getItem(STORAGE_KEY);\n      const parsedData = data ? JSON.parse(data) : [];\n      setFeedbacks(parsedData);\n      setIsLoading(false);\n      return parsedData;\n    } catch (error) {\n      console.error('Error reading from localStorage:', error);\n      setFeedbacks([]);\n      setIsLoading(false);\n      return [];\n    }\n  }, []);\n\n  // Save feedbacks to localStorage\n  const saveFeedbacks = useCallback((newFeedbacks) => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newFeedbacks));\n      localStorage.setItem(VERSION_KEY, Date.now().toString());\n      setFeedbacks(newFeedbacks);\n      return true;\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n      return false;\n    }\n  }, []);\n\n  // Add new feedback\n  const addFeedback = useCallback((feedbackData) => {\n    const newFeedback = {\n      id: generateId(),\n      createdAt: new Date().toISOString(),\n      ...feedbackData\n    };\n    \n    // Get current feedbacks from localStorage to ensure we have the latest data\n    const currentFeedbacks = loadFeedbacks();\n    const updatedFeedbacks = [newFeedback, ...currentFeedbacks];\n    saveFeedbacks(updatedFeedbacks);\n    return newFeedback;\n  }, [generateId, saveFeedbacks, loadFeedbacks]);\n\n  // Update feedback\n  const updateFeedback = useCallback((id, updatedData) => {\n    const currentFeedbacks = loadFeedbacks();\n    const updatedFeedbacks = currentFeedbacks.map(feedback => \n      feedback.id === id ? { ...feedback, ...updatedData } : feedback\n    );\n    saveFeedbacks(updatedFeedbacks);\n    return updatedFeedbacks.find(feedback => feedback.id === id);\n  }, [saveFeedbacks, loadFeedbacks]);\n\n  // Delete feedback\n  const deleteFeedback = useCallback((id) => {\n    const currentFeedbacks = loadFeedbacks();\n    const updatedFeedbacks = currentFeedbacks.filter(feedback => feedback.id !== id);\n    saveFeedbacks(updatedFeedbacks);\n    return true;\n  }, [saveFeedbacks, loadFeedbacks]);\n\n  // Clear all feedbacks\n  const clearAllFeedbacks = useCallback(() => {\n    localStorage.removeItem(STORAGE_KEY);\n    localStorage.removeItem(VERSION_KEY);\n    setFeedbacks([]);\n  }, []);\n\n  // Search feedbacks\n  const searchFeedbacks = useCallback((query, sentiment = null) => {\n    const searchTerm = query.toLowerCase();\n    const currentFeedbacks = loadFeedbacks();\n    \n    return currentFeedbacks.filter(feedback => {\n      const textMatch = !query || \n        (feedback.favouriteItem && feedback.favouriteItem.toLowerCase().includes(searchTerm)) ||\n        (feedback.improvements && feedback.improvements.toLowerCase().includes(searchTerm)) ||\n        (feedback.mealPreference && feedback.mealPreference.toLowerCase().includes(searchTerm));\n      \n      const sentimentMatch = !sentiment || feedback.sentiment?.label === sentiment;\n      \n      return textMatch && sentimentMatch;\n    });\n  }, [loadFeedbacks]);\n\n  // Calculate analytics\n  const calculateAnalytics = useCallback(() => {\n    if (feedbacks.length === 0) {\n      return {\n        count: 0,\n        averages: {},\n        sentiment: { positive: 0, neutral: 0, negative: 0, averageScore: 0 }\n      };\n    }\n\n    const numericFields = ['taste', 'service', 'wait', 'overall', 'experienceIndex'];\n    const averages = {};\n    \n    numericFields.forEach(field => {\n      const values = feedbacks\n        .map(f => f[field])\n        .filter(v => v !== null && v !== undefined && !isNaN(v));\n      \n      if (values.length > 0) {\n        averages[field] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      }\n    });\n\n    const sentimentCounts = { positive: 0, neutral: 0, negative: 0 };\n    let sentimentSum = 0;\n    let sentimentCount = 0;\n\n    feedbacks.forEach(feedback => {\n      if (feedback.sentiment?.label) {\n        sentimentCounts[feedback.sentiment.label]++;\n        if (feedback.sentiment.score !== undefined) {\n          sentimentSum += feedback.sentiment.score;\n          sentimentCount++;\n        }\n      }\n    });\n\n    return {\n      count: feedbacks.length,\n      averages,\n      sentiment: {\n        ...sentimentCounts,\n        averageScore: sentimentCount > 0 ? sentimentSum / sentimentCount : 0\n      }\n    };\n  }, [feedbacks]);\n\n  // Export data\n  const exportData = useCallback(() => {\n    const exportData = {\n      version: '1.0',\n      exportedAt: new Date().toISOString(),\n      feedbacks: feedbacks\n    };\n    return JSON.stringify(exportData, null, 2);\n  }, [feedbacks]);\n\n  // Import data\n  const importData = useCallback((jsonData) => {\n    try {\n      const data = JSON.parse(jsonData);\n      if (data.feedbacks && Array.isArray(data.feedbacks)) {\n        saveFeedbacks(data.feedbacks);\n        return { success: true, count: data.feedbacks.length };\n      }\n      return { success: false, error: 'Invalid data format' };\n    } catch (error) {\n      return { success: false, error: 'Invalid JSON format' };\n    }\n  }, [saveFeedbacks]);\n\n  // Load feedbacks on mount\n  useEffect(() => {\n    loadFeedbacks();\n  }, [loadFeedbacks]);\n\n  return {\n    feedbacks,\n    isLoading,\n    addFeedback,\n    updateFeedback,\n    deleteFeedback,\n    clearAllFeedbacks,\n    searchFeedbacks,\n    calculateAnalytics,\n    exportData,\n    importData,\n    loadFeedbacks\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,MAAMC,WAAW,GAAG,uBAAuB;AAC3C,MAAMC,WAAW,GAAG,0BAA0B;AAE9C,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMW,UAAU,GAAGT,WAAW,CAAC,MAAM;IACnC,OAAOU,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACF,QAAQ,CAAC,EAAE,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,aAAa,GAAGhB,WAAW,CAAC,MAAM;IACtC,IAAI;MACF,MAAMiB,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAClB,WAAW,CAAC;MAC9C,MAAMmB,UAAU,GAAGH,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAG,EAAE;MAC/CX,YAAY,CAACc,UAAU,CAAC;MACxBZ,YAAY,CAAC,KAAK,CAAC;MACnB,OAAOY,UAAU;IACnB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDjB,YAAY,CAAC,EAAE,CAAC;MAChBE,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,EAAE;IACX;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiB,aAAa,GAAGzB,WAAW,CAAE0B,YAAY,IAAK;IAClD,IAAI;MACFR,YAAY,CAACS,OAAO,CAAC1B,WAAW,EAAEoB,IAAI,CAACO,SAAS,CAACF,YAAY,CAAC,CAAC;MAC/DR,YAAY,CAACS,OAAO,CAACzB,WAAW,EAAEQ,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;MACxDN,YAAY,CAACoB,YAAY,CAAC;MAC1B,OAAO,IAAI;IACb,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,KAAK;IACd;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,WAAW,GAAG7B,WAAW,CAAE8B,YAAY,IAAK;IAChD,MAAMC,WAAW,GAAG;MAClBC,EAAE,EAAEvB,UAAU,CAAC,CAAC;MAChBwB,SAAS,EAAE,IAAIvB,IAAI,CAAC,CAAC,CAACwB,WAAW,CAAC,CAAC;MACnC,GAAGJ;IACL,CAAC;;IAED;IACA,MAAMK,gBAAgB,GAAGnB,aAAa,CAAC,CAAC;IACxC,MAAMoB,gBAAgB,GAAG,CAACL,WAAW,EAAE,GAAGI,gBAAgB,CAAC;IAC3DV,aAAa,CAACW,gBAAgB,CAAC;IAC/B,OAAOL,WAAW;EACpB,CAAC,EAAE,CAACtB,UAAU,EAAEgB,aAAa,EAAET,aAAa,CAAC,CAAC;;EAE9C;EACA,MAAMqB,cAAc,GAAGrC,WAAW,CAAC,CAACgC,EAAE,EAAEM,WAAW,KAAK;IACtD,MAAMH,gBAAgB,GAAGnB,aAAa,CAAC,CAAC;IACxC,MAAMoB,gBAAgB,GAAGD,gBAAgB,CAACI,GAAG,CAACC,QAAQ,IACpDA,QAAQ,CAACR,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGQ,QAAQ;MAAE,GAAGF;IAAY,CAAC,GAAGE,QACzD,CAAC;IACDf,aAAa,CAACW,gBAAgB,CAAC;IAC/B,OAAOA,gBAAgB,CAACK,IAAI,CAACD,QAAQ,IAAIA,QAAQ,CAACR,EAAE,KAAKA,EAAE,CAAC;EAC9D,CAAC,EAAE,CAACP,aAAa,EAAET,aAAa,CAAC,CAAC;;EAElC;EACA,MAAM0B,cAAc,GAAG1C,WAAW,CAAEgC,EAAE,IAAK;IACzC,MAAMG,gBAAgB,GAAGnB,aAAa,CAAC,CAAC;IACxC,MAAMoB,gBAAgB,GAAGD,gBAAgB,CAACQ,MAAM,CAACH,QAAQ,IAAIA,QAAQ,CAACR,EAAE,KAAKA,EAAE,CAAC;IAChFP,aAAa,CAACW,gBAAgB,CAAC;IAC/B,OAAO,IAAI;EACb,CAAC,EAAE,CAACX,aAAa,EAAET,aAAa,CAAC,CAAC;;EAElC;EACA,MAAM4B,iBAAiB,GAAG5C,WAAW,CAAC,MAAM;IAC1CkB,YAAY,CAAC2B,UAAU,CAAC5C,WAAW,CAAC;IACpCiB,YAAY,CAAC2B,UAAU,CAAC3C,WAAW,CAAC;IACpCI,YAAY,CAAC,EAAE,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMwC,eAAe,GAAG9C,WAAW,CAAC,CAAC+C,KAAK,EAAEC,SAAS,GAAG,IAAI,KAAK;IAC/D,MAAMC,UAAU,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC;IACtC,MAAMf,gBAAgB,GAAGnB,aAAa,CAAC,CAAC;IAExC,OAAOmB,gBAAgB,CAACQ,MAAM,CAACH,QAAQ,IAAI;MAAA,IAAAW,mBAAA;MACzC,MAAMC,SAAS,GAAG,CAACL,KAAK,IACrBP,QAAQ,CAACa,aAAa,IAAIb,QAAQ,CAACa,aAAa,CAACH,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,UAAU,CAAE,IACpFT,QAAQ,CAACe,YAAY,IAAIf,QAAQ,CAACe,YAAY,CAACL,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,UAAU,CAAE,IAClFT,QAAQ,CAACgB,cAAc,IAAIhB,QAAQ,CAACgB,cAAc,CAACN,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,UAAU,CAAE;MAEzF,MAAMQ,cAAc,GAAG,CAACT,SAAS,IAAI,EAAAG,mBAAA,GAAAX,QAAQ,CAACQ,SAAS,cAAAG,mBAAA,uBAAlBA,mBAAA,CAAoBO,KAAK,MAAKV,SAAS;MAE5E,OAAOI,SAAS,IAAIK,cAAc;IACpC,CAAC,CAAC;EACJ,CAAC,EAAE,CAACzC,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAM2C,kBAAkB,GAAG3D,WAAW,CAAC,MAAM;IAC3C,IAAIK,SAAS,CAACuD,MAAM,KAAK,CAAC,EAAE;MAC1B,OAAO;QACLC,KAAK,EAAE,CAAC;QACRC,QAAQ,EAAE,CAAC,CAAC;QACZd,SAAS,EAAE;UAAEe,QAAQ,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEC,QAAQ,EAAE,CAAC;UAAEC,YAAY,EAAE;QAAE;MACrE,CAAC;IACH;IAEA,MAAMC,aAAa,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,iBAAiB,CAAC;IAChF,MAAML,QAAQ,GAAG,CAAC,CAAC;IAEnBK,aAAa,CAACC,OAAO,CAACC,KAAK,IAAI;MAC7B,MAAMC,MAAM,GAAGjE,SAAS,CACrBkC,GAAG,CAACgC,CAAC,IAAIA,CAAC,CAACF,KAAK,CAAC,CAAC,CAClB1B,MAAM,CAAC6B,CAAC,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAKC,SAAS,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC,CAAC;MAE1D,IAAIF,MAAM,CAACV,MAAM,GAAG,CAAC,EAAE;QACrBE,QAAQ,CAACO,KAAK,CAAC,GAAGC,MAAM,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,GAAGP,MAAM,CAACV,MAAM;MAC7E;IACF,CAAC,CAAC;IAEF,MAAMkB,eAAe,GAAG;MAAEf,QAAQ,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IAChE,IAAIc,YAAY,GAAG,CAAC;IACpB,IAAIC,cAAc,GAAG,CAAC;IAEtB3E,SAAS,CAAC+D,OAAO,CAAC5B,QAAQ,IAAI;MAAA,IAAAyC,oBAAA;MAC5B,KAAAA,oBAAA,GAAIzC,QAAQ,CAACQ,SAAS,cAAAiC,oBAAA,eAAlBA,oBAAA,CAAoBvB,KAAK,EAAE;QAC7BoB,eAAe,CAACtC,QAAQ,CAACQ,SAAS,CAACU,KAAK,CAAC,EAAE;QAC3C,IAAIlB,QAAQ,CAACQ,SAAS,CAACkC,KAAK,KAAKT,SAAS,EAAE;UAC1CM,YAAY,IAAIvC,QAAQ,CAACQ,SAAS,CAACkC,KAAK;UACxCF,cAAc,EAAE;QAClB;MACF;IACF,CAAC,CAAC;IAEF,OAAO;MACLnB,KAAK,EAAExD,SAAS,CAACuD,MAAM;MACvBE,QAAQ;MACRd,SAAS,EAAE;QACT,GAAG8B,eAAe;QAClBZ,YAAY,EAAEc,cAAc,GAAG,CAAC,GAAGD,YAAY,GAAGC,cAAc,GAAG;MACrE;IACF,CAAC;EACH,CAAC,EAAE,CAAC3E,SAAS,CAAC,CAAC;;EAEf;EACA,MAAM8E,UAAU,GAAGnF,WAAW,CAAC,MAAM;IACnC,MAAMmF,UAAU,GAAG;MACjBC,OAAO,EAAE,KAAK;MACdC,UAAU,EAAE,IAAI3E,IAAI,CAAC,CAAC,CAACwB,WAAW,CAAC,CAAC;MACpC7B,SAAS,EAAEA;IACb,CAAC;IACD,OAAOgB,IAAI,CAACO,SAAS,CAACuD,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;EAC5C,CAAC,EAAE,CAAC9E,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMiF,UAAU,GAAGtF,WAAW,CAAEuF,QAAQ,IAAK;IAC3C,IAAI;MACF,MAAMtE,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACiE,QAAQ,CAAC;MACjC,IAAItE,IAAI,CAACZ,SAAS,IAAImF,KAAK,CAACC,OAAO,CAACxE,IAAI,CAACZ,SAAS,CAAC,EAAE;QACnDoB,aAAa,CAACR,IAAI,CAACZ,SAAS,CAAC;QAC7B,OAAO;UAAEqF,OAAO,EAAE,IAAI;UAAE7B,KAAK,EAAE5C,IAAI,CAACZ,SAAS,CAACuD;QAAO,CAAC;MACxD;MACA,OAAO;QAAE8B,OAAO,EAAE,KAAK;QAAEnE,KAAK,EAAE;MAAsB,CAAC;IACzD,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QAAEmE,OAAO,EAAE,KAAK;QAAEnE,KAAK,EAAE;MAAsB,CAAC;IACzD;EACF,CAAC,EAAE,CAACE,aAAa,CAAC,CAAC;;EAEnB;EACA1B,SAAS,CAAC,MAAM;IACdiB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,OAAO;IACLX,SAAS;IACTE,SAAS;IACTsB,WAAW;IACXQ,cAAc;IACdK,cAAc;IACdE,iBAAiB;IACjBE,eAAe;IACfa,kBAAkB;IAClBwB,UAAU;IACVG,UAAU;IACVtE;EACF,CAAC;AACH,CAAC;AAACZ,EAAA,CAxLWD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}